stages:
  - test-ci
  - deploy
  - test-cd

variables:  #Set/mask items in gitlab for flexibility and security. 
  DOCKER_FILE: "Dockerfile"
  DOCKER_REGISTRY: "docker.io"
  DOCKER_CLI_EXPERIMENTAL: "enabled"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_USERNAME: "" 
  DOCKER_PASSWORD: ""
  DOCKER_TLS_CERTDIR: ""
  DOCKER_IMAGE_NAME: "bbertka/temporal-review-analyzer"  # Base image name
  DOCKER_BASE_TAG: "latest"
  KUBE_NAMESPACE: "dev01"
  KUBE_TOKEN: ""
  KUBE_URL: ""
  APP_IP_ADDRESS: "" #location of running app (cluster, node, lb etc)
  # Local test execution will need these set
  OPENAI_API_KEY: ""
  PORT: 5000 #Flask port
  TEMPORAL_HOST: "192.168.1.114"
  TEMPORAL_PORT: "7233"
  REDIS_HOST: "192.168.1.110"
  REDIS_PORT: 6379
  REDIS_DB: "0"
  AMAZON_USERNAME: "" #optional
  AMAZON_PASSWORD: "" #optional
  # Default item to search for in tests
  ITEM_ID:  B0CJVL51V9

local-test:
  stage: test-ci
  image: python:3.8
  before_script:
    - apt-get update && apt-get install -y jq
    - pip install -r requirements.txt
  script:
    - |
      python src/main.py &> /dev/null &
      sleep 5  # Allow some time for the server to start.
      response=$(curl --fail -s "http://localhost:5000/sentiment?item=${ITEM_ID}")
      echo "Response: $response"
      if ! echo "$response" | jq -e '.result != null and .verdict != null'; then
        echo "Test failed: 'result' or 'verdict' is null."
        exit 1
      else
        echo "Test passed: Both 'result' and 'verdict' are present and not null."
      fi
  only:
    - main

# TODO: Templatize the deployment manifest
deploy-k3s:
  stage: deploy
  image: alpine/k8s:1.29.2
  script:
    - kubectl config set-cluster default-cluster --server=$KUBE_URL --insecure-skip-tls-verify=true
    - kubectl config set-credentials default-user --token=$KUBE_TOKEN
    - kubectl config set-context default --cluster=default-cluster --user=default-user --namespace=$KUBE_NAMESPACE
    - kubectl config use-context default
    - kubectl apply -f deployment.yml
    - DEPLOYMENT_NAME=$(grep 'name:' deployment.yml | awk 'NR==1{print $2}')
    - kubectl rollout restart deployment/$DEPLOYMENT_NAME -n $KUBE_NAMESPACE
  only:
    - main

remote-test:
  stage: test-cd
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - set -e  # Ensure the script exits on the first command that fails.
    - |
      response=$(curl -s "http://$APP_IP_ADDRESS/sentiment?item=${ITEM_ID}")
      echo "Response: $response"
      if ! echo "$response" | jq -e '.result != null and .verdict != null'; then
        echo "Test failed: 'result' or 'verdict' is null."
        exit 1
      else
        echo "Test passed: Both 'result' and 'verdict' are present and not null."
      fi
  only:
    - main
